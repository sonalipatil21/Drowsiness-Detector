import csv


class DrowsyData:
    # Init datapoints dictionary, contains KV pairs of time:duration
    def __init__(self):
        self.datapoints = {}

    # Add datapoint to existing "datapoints" dictionary via update method
    # Time = datetime of when a datapoint was created
    # duration = time in seconds associated with the blink (event), may be zero for Type 3
    # Type 1 = event that exceeds ECT and not alarm thresh
    # Type 2 = event that exceeds alarm thresh
    # Type 3 = event that means the wake-up button was pressed
    def add_datapoint(self, time, duration, blink_type):
        self.datapoints.update({time: [duration, blink_type]})

    # Save datapoints generated by the drowsy detector to the end of the specified file.
    # Corruption is checked for, and then the file is opened using the "append" tag
    def save_data_to_file(self, filename):
        data_file = open(filename, "a")
        for key in self.datapoints.keys():
            data_file.write("{},{},{}\n".format(key, self.datapoints[key][0], self.datapoints[key][1]))

    # Get datapoints from the specified file. Corruption is checked for and file is opened with the "read" tag
    # All data after the first line will be entered into a dictionary that is returned by the function
    # The time field is checked using a regex so that it following this format: YYYY-MM-DD HH:MM:SS.msmsmsmsmsms
    @staticmethod
    def get_data_from_file(filename):
        data_file = open(filename, "r")
        data_reader = csv.DictReader(data_file)
        saved_data = {}
        for row in data_reader:
            if row.__contains__('time,duration,type'):
                continue
            else:
                saved_data.update({row["time"]: [row["duration"], int(row["type"])]})
        data_file.close()
        return saved_data

    # Sets datapoints member variable to an empty dictionary. Effectively deleting any local data
    def clear_datapoints(self):
        self.datapoints = {}
